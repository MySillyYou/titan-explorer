// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gnasnik/titan-explorer/core/generated/model"
)

func newTaskInfo(db *gorm.DB, opts ...gen.DOOption) taskInfo {
	_taskInfo := taskInfo{}

	_taskInfo.taskInfoDo.UseDB(db, opts...)
	_taskInfo.taskInfoDo.UseModel(&model.TaskInfo{})

	tableName := _taskInfo.taskInfoDo.TableName()
	_taskInfo.ALL = field.NewAsterisk(tableName)
	_taskInfo.ID = field.NewInt64(tableName, "id")
	_taskInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_taskInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_taskInfo.DeletedAt = field.NewField(tableName, "deleted_at")
	_taskInfo.UserID = field.NewString(tableName, "user_id")
	_taskInfo.MinerID = field.NewString(tableName, "miner_id")
	_taskInfo.DeviceID = field.NewString(tableName, "device_id")
	_taskInfo.FileName = field.NewString(tableName, "file_name")
	_taskInfo.IPAddress = field.NewString(tableName, "ip_address")
	_taskInfo.Cid = field.NewString(tableName, "cid")
	_taskInfo.BandwidthUp = field.NewString(tableName, "bandwidth_up")
	_taskInfo.BandwidthDown = field.NewString(tableName, "bandwidth_down")
	_taskInfo.TimeNeed = field.NewString(tableName, "time_need")
	_taskInfo.Time = field.NewTime(tableName, "time")
	_taskInfo.ServiceCountry = field.NewString(tableName, "service_country")
	_taskInfo.Region = field.NewString(tableName, "region")
	_taskInfo.Status = field.NewString(tableName, "status")
	_taskInfo.Price = field.NewFloat64(tableName, "price")
	_taskInfo.FileSize = field.NewFloat64(tableName, "file_size")
	_taskInfo.DownloadURL = field.NewString(tableName, "download_url")

	_taskInfo.fillFieldMap()

	return _taskInfo
}

type taskInfo struct {
	taskInfoDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	UserID         field.String
	MinerID        field.String
	DeviceID       field.String
	FileName       field.String
	IPAddress      field.String
	Cid            field.String
	BandwidthUp    field.String
	BandwidthDown  field.String
	TimeNeed       field.String
	Time           field.Time
	ServiceCountry field.String
	Region         field.String
	Status         field.String
	Price          field.Float64
	FileSize       field.Float64
	DownloadURL    field.String

	fieldMap map[string]field.Expr
}

func (t taskInfo) Table(newTableName string) *taskInfo {
	t.taskInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskInfo) As(alias string) *taskInfo {
	t.taskInfoDo.DO = *(t.taskInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskInfo) updateTableName(table string) *taskInfo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.UserID = field.NewString(table, "user_id")
	t.MinerID = field.NewString(table, "miner_id")
	t.DeviceID = field.NewString(table, "device_id")
	t.FileName = field.NewString(table, "file_name")
	t.IPAddress = field.NewString(table, "ip_address")
	t.Cid = field.NewString(table, "cid")
	t.BandwidthUp = field.NewString(table, "bandwidth_up")
	t.BandwidthDown = field.NewString(table, "bandwidth_down")
	t.TimeNeed = field.NewString(table, "time_need")
	t.Time = field.NewTime(table, "time")
	t.ServiceCountry = field.NewString(table, "service_country")
	t.Region = field.NewString(table, "region")
	t.Status = field.NewString(table, "status")
	t.Price = field.NewFloat64(table, "price")
	t.FileSize = field.NewFloat64(table, "file_size")
	t.DownloadURL = field.NewString(table, "download_url")

	t.fillFieldMap()

	return t
}

func (t *taskInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["miner_id"] = t.MinerID
	t.fieldMap["device_id"] = t.DeviceID
	t.fieldMap["file_name"] = t.FileName
	t.fieldMap["ip_address"] = t.IPAddress
	t.fieldMap["cid"] = t.Cid
	t.fieldMap["bandwidth_up"] = t.BandwidthUp
	t.fieldMap["bandwidth_down"] = t.BandwidthDown
	t.fieldMap["time_need"] = t.TimeNeed
	t.fieldMap["time"] = t.Time
	t.fieldMap["service_country"] = t.ServiceCountry
	t.fieldMap["region"] = t.Region
	t.fieldMap["status"] = t.Status
	t.fieldMap["price"] = t.Price
	t.fieldMap["file_size"] = t.FileSize
	t.fieldMap["download_url"] = t.DownloadURL
}

func (t taskInfo) clone(db *gorm.DB) taskInfo {
	t.taskInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskInfo) replaceDB(db *gorm.DB) taskInfo {
	t.taskInfoDo.ReplaceDB(db)
	return t
}

type taskInfoDo struct{ gen.DO }

type ITaskInfoDo interface {
	gen.SubQuery
	Debug() ITaskInfoDo
	WithContext(ctx context.Context) ITaskInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskInfoDo
	WriteDB() ITaskInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskInfoDo
	Not(conds ...gen.Condition) ITaskInfoDo
	Or(conds ...gen.Condition) ITaskInfoDo
	Select(conds ...field.Expr) ITaskInfoDo
	Where(conds ...gen.Condition) ITaskInfoDo
	Order(conds ...field.Expr) ITaskInfoDo
	Distinct(cols ...field.Expr) ITaskInfoDo
	Omit(cols ...field.Expr) ITaskInfoDo
	Join(table schema.Tabler, on ...field.Expr) ITaskInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskInfoDo
	Group(cols ...field.Expr) ITaskInfoDo
	Having(conds ...gen.Condition) ITaskInfoDo
	Limit(limit int) ITaskInfoDo
	Offset(offset int) ITaskInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskInfoDo
	Unscoped() ITaskInfoDo
	Create(values ...*model.TaskInfo) error
	CreateInBatches(values []*model.TaskInfo, batchSize int) error
	Save(values ...*model.TaskInfo) error
	First() (*model.TaskInfo, error)
	Take() (*model.TaskInfo, error)
	Last() (*model.TaskInfo, error)
	Find() ([]*model.TaskInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskInfo, err error)
	FindInBatches(result *[]*model.TaskInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskInfoDo
	Assign(attrs ...field.AssignExpr) ITaskInfoDo
	Joins(fields ...field.RelationField) ITaskInfoDo
	Preload(fields ...field.RelationField) ITaskInfoDo
	FirstOrInit() (*model.TaskInfo, error)
	FirstOrCreate() (*model.TaskInfo, error)
	FindByPage(offset int, limit int) (result []*model.TaskInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskInfoDo) Debug() ITaskInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t taskInfoDo) WithContext(ctx context.Context) ITaskInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskInfoDo) ReadDB() ITaskInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskInfoDo) WriteDB() ITaskInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskInfoDo) Session(config *gorm.Session) ITaskInfoDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskInfoDo) Clauses(conds ...clause.Expression) ITaskInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskInfoDo) Returning(value interface{}, columns ...string) ITaskInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskInfoDo) Not(conds ...gen.Condition) ITaskInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskInfoDo) Or(conds ...gen.Condition) ITaskInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskInfoDo) Select(conds ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskInfoDo) Where(conds ...gen.Condition) ITaskInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITaskInfoDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t taskInfoDo) Order(conds ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskInfoDo) Distinct(cols ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskInfoDo) Omit(cols ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskInfoDo) Join(table schema.Tabler, on ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskInfoDo) Group(cols ...field.Expr) ITaskInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskInfoDo) Having(conds ...gen.Condition) ITaskInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskInfoDo) Limit(limit int) ITaskInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskInfoDo) Offset(offset int) ITaskInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskInfoDo) Unscoped() ITaskInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskInfoDo) Create(values ...*model.TaskInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskInfoDo) CreateInBatches(values []*model.TaskInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskInfoDo) Save(values ...*model.TaskInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskInfoDo) First() (*model.TaskInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) Take() (*model.TaskInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) Last() (*model.TaskInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) Find() ([]*model.TaskInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskInfo), err
}

func (t taskInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskInfo, err error) {
	buf := make([]*model.TaskInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskInfoDo) FindInBatches(result *[]*model.TaskInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskInfoDo) Attrs(attrs ...field.AssignExpr) ITaskInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskInfoDo) Assign(attrs ...field.AssignExpr) ITaskInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskInfoDo) Joins(fields ...field.RelationField) ITaskInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskInfoDo) Preload(fields ...field.RelationField) ITaskInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskInfoDo) FirstOrInit() (*model.TaskInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) FirstOrCreate() (*model.TaskInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) FindByPage(offset int, limit int) (result []*model.TaskInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskInfoDo) Delete(models ...*model.TaskInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskInfoDo) withDO(do gen.Dao) *taskInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
