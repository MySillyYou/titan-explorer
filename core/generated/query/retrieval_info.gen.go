// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gnasnik/titan-explorer/core/generated/model"
)

func newRetrievalInfo(db *gorm.DB, opts ...gen.DOOption) retrievalInfo {
	_retrievalInfo := retrievalInfo{}

	_retrievalInfo.retrievalInfoDo.UseDB(db, opts...)
	_retrievalInfo.retrievalInfoDo.UseModel(&model.RetrievalInfo{})

	tableName := _retrievalInfo.retrievalInfoDo.TableName()
	_retrievalInfo.ALL = field.NewAsterisk(tableName)
	_retrievalInfo.ID = field.NewInt64(tableName, "id")
	_retrievalInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_retrievalInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_retrievalInfo.DeletedAt = field.NewField(tableName, "deleted_at")
	_retrievalInfo.ServiceCountry = field.NewString(tableName, "service_country")
	_retrievalInfo.ServiceStatus = field.NewString(tableName, "service_status")
	_retrievalInfo.TaskStatus = field.NewString(tableName, "task_status")
	_retrievalInfo.FileName = field.NewString(tableName, "file_name")
	_retrievalInfo.FileSize = field.NewString(tableName, "file_size")
	_retrievalInfo.CreateTime = field.NewString(tableName, "create_time")
	_retrievalInfo.Cid = field.NewString(tableName, "cid")
	_retrievalInfo.Price = field.NewFloat64(tableName, "price")
	_retrievalInfo.MinerID = field.NewString(tableName, "miner_id")
	_retrievalInfo.UserID = field.NewString(tableName, "user_id")

	_retrievalInfo.fillFieldMap()

	return _retrievalInfo
}

type retrievalInfo struct {
	retrievalInfoDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	ServiceCountry field.String
	ServiceStatus  field.String
	TaskStatus     field.String
	FileName       field.String
	FileSize       field.String
	CreateTime     field.String
	Cid            field.String
	Price          field.Float64
	MinerID        field.String
	UserID         field.String

	fieldMap map[string]field.Expr
}

func (r retrievalInfo) Table(newTableName string) *retrievalInfo {
	r.retrievalInfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r retrievalInfo) As(alias string) *retrievalInfo {
	r.retrievalInfoDo.DO = *(r.retrievalInfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *retrievalInfo) updateTableName(table string) *retrievalInfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.ServiceCountry = field.NewString(table, "service_country")
	r.ServiceStatus = field.NewString(table, "service_status")
	r.TaskStatus = field.NewString(table, "task_status")
	r.FileName = field.NewString(table, "file_name")
	r.FileSize = field.NewString(table, "file_size")
	r.CreateTime = field.NewString(table, "create_time")
	r.Cid = field.NewString(table, "cid")
	r.Price = field.NewFloat64(table, "price")
	r.MinerID = field.NewString(table, "miner_id")
	r.UserID = field.NewString(table, "user_id")

	r.fillFieldMap()

	return r
}

func (r *retrievalInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *retrievalInfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["service_country"] = r.ServiceCountry
	r.fieldMap["service_status"] = r.ServiceStatus
	r.fieldMap["task_status"] = r.TaskStatus
	r.fieldMap["file_name"] = r.FileName
	r.fieldMap["file_size"] = r.FileSize
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["cid"] = r.Cid
	r.fieldMap["price"] = r.Price
	r.fieldMap["miner_id"] = r.MinerID
	r.fieldMap["user_id"] = r.UserID
}

func (r retrievalInfo) clone(db *gorm.DB) retrievalInfo {
	r.retrievalInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r retrievalInfo) replaceDB(db *gorm.DB) retrievalInfo {
	r.retrievalInfoDo.ReplaceDB(db)
	return r
}

type retrievalInfoDo struct{ gen.DO }

type IRetrievalInfoDo interface {
	gen.SubQuery
	Debug() IRetrievalInfoDo
	WithContext(ctx context.Context) IRetrievalInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRetrievalInfoDo
	WriteDB() IRetrievalInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRetrievalInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRetrievalInfoDo
	Not(conds ...gen.Condition) IRetrievalInfoDo
	Or(conds ...gen.Condition) IRetrievalInfoDo
	Select(conds ...field.Expr) IRetrievalInfoDo
	Where(conds ...gen.Condition) IRetrievalInfoDo
	Order(conds ...field.Expr) IRetrievalInfoDo
	Distinct(cols ...field.Expr) IRetrievalInfoDo
	Omit(cols ...field.Expr) IRetrievalInfoDo
	Join(table schema.Tabler, on ...field.Expr) IRetrievalInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRetrievalInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRetrievalInfoDo
	Group(cols ...field.Expr) IRetrievalInfoDo
	Having(conds ...gen.Condition) IRetrievalInfoDo
	Limit(limit int) IRetrievalInfoDo
	Offset(offset int) IRetrievalInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRetrievalInfoDo
	Unscoped() IRetrievalInfoDo
	Create(values ...*model.RetrievalInfo) error
	CreateInBatches(values []*model.RetrievalInfo, batchSize int) error
	Save(values ...*model.RetrievalInfo) error
	First() (*model.RetrievalInfo, error)
	Take() (*model.RetrievalInfo, error)
	Last() (*model.RetrievalInfo, error)
	Find() ([]*model.RetrievalInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RetrievalInfo, err error)
	FindInBatches(result *[]*model.RetrievalInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RetrievalInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRetrievalInfoDo
	Assign(attrs ...field.AssignExpr) IRetrievalInfoDo
	Joins(fields ...field.RelationField) IRetrievalInfoDo
	Preload(fields ...field.RelationField) IRetrievalInfoDo
	FirstOrInit() (*model.RetrievalInfo, error)
	FirstOrCreate() (*model.RetrievalInfo, error)
	FindByPage(offset int, limit int) (result []*model.RetrievalInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRetrievalInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r retrievalInfoDo) Debug() IRetrievalInfoDo {
	return r.withDO(r.DO.Debug())
}

func (r retrievalInfoDo) WithContext(ctx context.Context) IRetrievalInfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r retrievalInfoDo) ReadDB() IRetrievalInfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r retrievalInfoDo) WriteDB() IRetrievalInfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r retrievalInfoDo) Session(config *gorm.Session) IRetrievalInfoDo {
	return r.withDO(r.DO.Session(config))
}

func (r retrievalInfoDo) Clauses(conds ...clause.Expression) IRetrievalInfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r retrievalInfoDo) Returning(value interface{}, columns ...string) IRetrievalInfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r retrievalInfoDo) Not(conds ...gen.Condition) IRetrievalInfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r retrievalInfoDo) Or(conds ...gen.Condition) IRetrievalInfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r retrievalInfoDo) Select(conds ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r retrievalInfoDo) Where(conds ...gen.Condition) IRetrievalInfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r retrievalInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRetrievalInfoDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r retrievalInfoDo) Order(conds ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r retrievalInfoDo) Distinct(cols ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r retrievalInfoDo) Omit(cols ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r retrievalInfoDo) Join(table schema.Tabler, on ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r retrievalInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r retrievalInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r retrievalInfoDo) Group(cols ...field.Expr) IRetrievalInfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r retrievalInfoDo) Having(conds ...gen.Condition) IRetrievalInfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r retrievalInfoDo) Limit(limit int) IRetrievalInfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r retrievalInfoDo) Offset(offset int) IRetrievalInfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r retrievalInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRetrievalInfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r retrievalInfoDo) Unscoped() IRetrievalInfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r retrievalInfoDo) Create(values ...*model.RetrievalInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r retrievalInfoDo) CreateInBatches(values []*model.RetrievalInfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r retrievalInfoDo) Save(values ...*model.RetrievalInfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r retrievalInfoDo) First() (*model.RetrievalInfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalInfo), nil
	}
}

func (r retrievalInfoDo) Take() (*model.RetrievalInfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalInfo), nil
	}
}

func (r retrievalInfoDo) Last() (*model.RetrievalInfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalInfo), nil
	}
}

func (r retrievalInfoDo) Find() ([]*model.RetrievalInfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.RetrievalInfo), err
}

func (r retrievalInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RetrievalInfo, err error) {
	buf := make([]*model.RetrievalInfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r retrievalInfoDo) FindInBatches(result *[]*model.RetrievalInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r retrievalInfoDo) Attrs(attrs ...field.AssignExpr) IRetrievalInfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r retrievalInfoDo) Assign(attrs ...field.AssignExpr) IRetrievalInfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r retrievalInfoDo) Joins(fields ...field.RelationField) IRetrievalInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r retrievalInfoDo) Preload(fields ...field.RelationField) IRetrievalInfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r retrievalInfoDo) FirstOrInit() (*model.RetrievalInfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalInfo), nil
	}
}

func (r retrievalInfoDo) FirstOrCreate() (*model.RetrievalInfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalInfo), nil
	}
}

func (r retrievalInfoDo) FindByPage(offset int, limit int) (result []*model.RetrievalInfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r retrievalInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r retrievalInfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r retrievalInfoDo) Delete(models ...*model.RetrievalInfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *retrievalInfoDo) withDO(do gen.Dao) *retrievalInfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
