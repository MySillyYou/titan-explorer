// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gnasnik/titan-explorer/core/generated/model"
)

func newHourDaily(db *gorm.DB, opts ...gen.DOOption) hourDaily {
	_hourDaily := hourDaily{}

	_hourDaily.hourDailyDo.UseDB(db, opts...)
	_hourDaily.hourDailyDo.UseModel(&model.HourDaily{})

	tableName := _hourDaily.hourDailyDo.TableName()
	_hourDaily.ALL = field.NewAsterisk(tableName)
	_hourDaily.ID = field.NewInt64(tableName, "id")
	_hourDaily.CreatedAt = field.NewTime(tableName, "created_at")
	_hourDaily.UpdatedAt = field.NewTime(tableName, "updated_at")
	_hourDaily.DeletedAt = field.NewField(tableName, "deleted_at")
	_hourDaily.UserID = field.NewString(tableName, "user_id")
	_hourDaily.DeviceID = field.NewString(tableName, "device_id")
	_hourDaily.Time = field.NewTime(tableName, "time")
	_hourDaily.HourIncome = field.NewFloat64(tableName, "hour_income")
	_hourDaily.OnlineTime = field.NewFloat64(tableName, "online_time")
	_hourDaily.PkgLossRatio = field.NewFloat64(tableName, "pkg_loss_ratio")
	_hourDaily.Latency = field.NewFloat64(tableName, "latency")
	_hourDaily.NatRatio = field.NewFloat64(tableName, "nat_ratio")
	_hourDaily.DiskUsage = field.NewFloat64(tableName, "disk_usage")

	_hourDaily.fillFieldMap()

	return _hourDaily
}

type hourDaily struct {
	hourDailyDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	UserID       field.String
	DeviceID     field.String
	Time         field.Time
	HourIncome   field.Float64
	OnlineTime   field.Float64
	PkgLossRatio field.Float64
	Latency      field.Float64
	NatRatio     field.Float64
	DiskUsage    field.Float64

	fieldMap map[string]field.Expr
}

func (h hourDaily) Table(newTableName string) *hourDaily {
	h.hourDailyDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hourDaily) As(alias string) *hourDaily {
	h.hourDailyDo.DO = *(h.hourDailyDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hourDaily) updateTableName(table string) *hourDaily {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.UpdatedAt = field.NewTime(table, "updated_at")
	h.DeletedAt = field.NewField(table, "deleted_at")
	h.UserID = field.NewString(table, "user_id")
	h.DeviceID = field.NewString(table, "device_id")
	h.Time = field.NewTime(table, "time")
	h.HourIncome = field.NewFloat64(table, "hour_income")
	h.OnlineTime = field.NewFloat64(table, "online_time")
	h.PkgLossRatio = field.NewFloat64(table, "pkg_loss_ratio")
	h.Latency = field.NewFloat64(table, "latency")
	h.NatRatio = field.NewFloat64(table, "nat_ratio")
	h.DiskUsage = field.NewFloat64(table, "disk_usage")

	h.fillFieldMap()

	return h
}

func (h *hourDaily) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hourDaily) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 13)
	h.fieldMap["id"] = h.ID
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["updated_at"] = h.UpdatedAt
	h.fieldMap["deleted_at"] = h.DeletedAt
	h.fieldMap["user_id"] = h.UserID
	h.fieldMap["device_id"] = h.DeviceID
	h.fieldMap["time"] = h.Time
	h.fieldMap["hour_income"] = h.HourIncome
	h.fieldMap["online_time"] = h.OnlineTime
	h.fieldMap["pkg_loss_ratio"] = h.PkgLossRatio
	h.fieldMap["latency"] = h.Latency
	h.fieldMap["nat_ratio"] = h.NatRatio
	h.fieldMap["disk_usage"] = h.DiskUsage
}

func (h hourDaily) clone(db *gorm.DB) hourDaily {
	h.hourDailyDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hourDaily) replaceDB(db *gorm.DB) hourDaily {
	h.hourDailyDo.ReplaceDB(db)
	return h
}

type hourDailyDo struct{ gen.DO }

type IHourDailyDo interface {
	gen.SubQuery
	Debug() IHourDailyDo
	WithContext(ctx context.Context) IHourDailyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHourDailyDo
	WriteDB() IHourDailyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHourDailyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHourDailyDo
	Not(conds ...gen.Condition) IHourDailyDo
	Or(conds ...gen.Condition) IHourDailyDo
	Select(conds ...field.Expr) IHourDailyDo
	Where(conds ...gen.Condition) IHourDailyDo
	Order(conds ...field.Expr) IHourDailyDo
	Distinct(cols ...field.Expr) IHourDailyDo
	Omit(cols ...field.Expr) IHourDailyDo
	Join(table schema.Tabler, on ...field.Expr) IHourDailyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHourDailyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHourDailyDo
	Group(cols ...field.Expr) IHourDailyDo
	Having(conds ...gen.Condition) IHourDailyDo
	Limit(limit int) IHourDailyDo
	Offset(offset int) IHourDailyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHourDailyDo
	Unscoped() IHourDailyDo
	Create(values ...*model.HourDaily) error
	CreateInBatches(values []*model.HourDaily, batchSize int) error
	Save(values ...*model.HourDaily) error
	First() (*model.HourDaily, error)
	Take() (*model.HourDaily, error)
	Last() (*model.HourDaily, error)
	Find() ([]*model.HourDaily, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HourDaily, err error)
	FindInBatches(result *[]*model.HourDaily, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HourDaily) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHourDailyDo
	Assign(attrs ...field.AssignExpr) IHourDailyDo
	Joins(fields ...field.RelationField) IHourDailyDo
	Preload(fields ...field.RelationField) IHourDailyDo
	FirstOrInit() (*model.HourDaily, error)
	FirstOrCreate() (*model.HourDaily, error)
	FindByPage(offset int, limit int) (result []*model.HourDaily, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHourDailyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hourDailyDo) Debug() IHourDailyDo {
	return h.withDO(h.DO.Debug())
}

func (h hourDailyDo) WithContext(ctx context.Context) IHourDailyDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hourDailyDo) ReadDB() IHourDailyDo {
	return h.Clauses(dbresolver.Read)
}

func (h hourDailyDo) WriteDB() IHourDailyDo {
	return h.Clauses(dbresolver.Write)
}

func (h hourDailyDo) Session(config *gorm.Session) IHourDailyDo {
	return h.withDO(h.DO.Session(config))
}

func (h hourDailyDo) Clauses(conds ...clause.Expression) IHourDailyDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hourDailyDo) Returning(value interface{}, columns ...string) IHourDailyDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hourDailyDo) Not(conds ...gen.Condition) IHourDailyDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hourDailyDo) Or(conds ...gen.Condition) IHourDailyDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hourDailyDo) Select(conds ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hourDailyDo) Where(conds ...gen.Condition) IHourDailyDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hourDailyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHourDailyDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hourDailyDo) Order(conds ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hourDailyDo) Distinct(cols ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hourDailyDo) Omit(cols ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hourDailyDo) Join(table schema.Tabler, on ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hourDailyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hourDailyDo) RightJoin(table schema.Tabler, on ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hourDailyDo) Group(cols ...field.Expr) IHourDailyDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hourDailyDo) Having(conds ...gen.Condition) IHourDailyDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hourDailyDo) Limit(limit int) IHourDailyDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hourDailyDo) Offset(offset int) IHourDailyDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hourDailyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHourDailyDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hourDailyDo) Unscoped() IHourDailyDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hourDailyDo) Create(values ...*model.HourDaily) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hourDailyDo) CreateInBatches(values []*model.HourDaily, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hourDailyDo) Save(values ...*model.HourDaily) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hourDailyDo) First() (*model.HourDaily, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HourDaily), nil
	}
}

func (h hourDailyDo) Take() (*model.HourDaily, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HourDaily), nil
	}
}

func (h hourDailyDo) Last() (*model.HourDaily, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HourDaily), nil
	}
}

func (h hourDailyDo) Find() ([]*model.HourDaily, error) {
	result, err := h.DO.Find()
	return result.([]*model.HourDaily), err
}

func (h hourDailyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HourDaily, err error) {
	buf := make([]*model.HourDaily, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hourDailyDo) FindInBatches(result *[]*model.HourDaily, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hourDailyDo) Attrs(attrs ...field.AssignExpr) IHourDailyDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hourDailyDo) Assign(attrs ...field.AssignExpr) IHourDailyDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hourDailyDo) Joins(fields ...field.RelationField) IHourDailyDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hourDailyDo) Preload(fields ...field.RelationField) IHourDailyDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hourDailyDo) FirstOrInit() (*model.HourDaily, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HourDaily), nil
	}
}

func (h hourDailyDo) FirstOrCreate() (*model.HourDaily, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HourDaily), nil
	}
}

func (h hourDailyDo) FindByPage(offset int, limit int) (result []*model.HourDaily, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hourDailyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hourDailyDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hourDailyDo) Delete(models ...*model.HourDaily) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hourDailyDo) withDO(do gen.Dao) *hourDailyDo {
	h.DO = *do.(*gen.DO)
	return h
}
